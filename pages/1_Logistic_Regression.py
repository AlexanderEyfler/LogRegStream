import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st

from matplotlib.lines import Line2D


# –∑–∞–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∏–∫–æ–Ω–∫—É –∏ —Ç–µ–∫—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ
st.set_page_config(page_title='Logistic Regression', page_icon='üëª')
st.title(
    '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Logistic Regression'
    )

st.markdown("""
### Logistic Regression
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ –¥–æ–ª–∂–µ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∞—Ç–∞—Å–µ—Ç,
–Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ–Ω —Ö–æ—á–µ—Ç –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. –î–∞—Ç–∞—Å–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω
—Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ —Å–µ–±–µ –Ω–∏–∫–∞–∫–∏—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º —á–∏—Å–ª–µ–Ω–Ω—ã—Ö! –í —è–≤–Ω–æ–º –≤–∏–¥–µ
–¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–∏–Ω —Ü–µ–ª–µ–≤–æ–π (target) —Å—Ç–æ–ª–±–µ—Ü –∏ –Ω–µ—Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
—Ñ–∏—á–µ–π (features). 
""")

upload_file = st.file_uploader(
    label='–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç (CSV)',
    type='csv'
    )

# –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞—Ç–∞—Å–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@st.cache_data
def load_data(uploaded_file):
    if uploaded_file is not None:
        return pd.read_csv(uploaded_file)
    return None

if upload_file is not None:
    # –ø–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —é–∑–µ—Ä–æ–º –¥–∞—Ç–∞—Å–µ—Ç
    df = load_data(uploaded_file=upload_file)

    # –≤—ã–≤–æ–¥–∏–º –ø–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ—á–µ–∫, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å —é–∑–µ—Ä–∞, —á—Ç–æ –¥–∞—Ç–∞—Å–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –≤–µ—Ä–Ω–æ
    st.write('### –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ—á–µ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞')
    st.write(df.head(5))

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏ –∏ —Å—á–∏—Ç–∞–µ–º –¥–∞–ª—å—à–µ
    class LogReg:

        def __init__(self, learning_rate, n_epochs):
            self.learning_rate = learning_rate
            self.n_epochs = n_epochs
            self.coef_ = None
            self.intercept_ = None


        def sigmoida(self, x):
            return 1 / (1 + np.exp(-x))


        def fit(self, X, y):
            # –ø–µ—Ä–µ–≤–µ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ numpy –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
            X = np.array(X)
            y = np.array(y)

            # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            n_samples, n_features = X.shape
            self.coef_ = np.random.uniform(low=0.0, high=1.0, size=n_features)
            self.intercept_ = 0

            # –∑–∞–ø—É—Å—Ç–∏–º —Ü–∏–∫–ª, —Ä–∞–≤–Ω—ã–π —á–∏—Å–ª–µ —ç–ø–æ—Ö
            for _ in range(self.n_epochs):
                # –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø–µ—Ä–≤—ã–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤–µ—Å–∞–º –∏ —Å–º–µ—â–µ–Ω–∏—é
                y_pred = self.sigmoida(np.dot(X, self.coef_) + self.intercept_)

                # –ø–æ—Å—á–∏—Ç–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã –¥–ª—è w0 –∏ w
                dw0_grad = -(y - y_pred)
                dw_grad = -X * (y - y_pred).reshape(-1, 1)

                # –æ–±–Ω–æ–≤–∏–º –≤–µ—Å–∞
                self.intercept_ = self.intercept_ - self.learning_rate * dw0_grad.mean()
                self.coef_ = self.coef_ - self.learning_rate * dw_grad.mean(axis=0)


        def predict_prob(self, X):
            X = np.array(X)
            y_pred = self.sigmoida(np.dot(X, self.coef_) + self.intercept_)
            return y_pred

        def predict(self, X):
            X = np.array(X)
            class_pred = [0 if y <= 0.5 else 1 for y in self.predict_prob(X)]
            return class_pred

    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –±—É–¥–µ—Ç —Ç–∞—Ä–≥–µ—Ç–æ–º
    name_target_column = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:", df.columns)
    target_column = df[name_target_column]
    train_columns = df.drop(name_target_column, axis=1)

    # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–ª—Å—è –æ–Ω, —á—Ç–æ –≤—Å–µ —á–∏–∫–∏-–ø—É–∫–∏
    st.write('### –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ—á–µ–∫ —Ç—Ä–µ–π–Ω–æ–≤–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –±–µ–∑ —Ç–∞—Ä–≥–µ—Ç–∞')
    st.write(train_columns.head())

    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ learning rate
    st.write('### –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π learning rate (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–≤–µ–Ω 0.01)')
    user_lr = st.number_input(
        '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ learning rate',
        min_value=0.0001,
        max_value=0.2,
        value=0.01,
        step=0.05
        )
    
    # –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ n_epochs
    st.write('### –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏–µ (–∫–æ–ª-–≤–æ —ç–ø–æ—Ö) (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - 101)')
    user_epochs = st.number_input(
        '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö',
        min_value=1,
        max_value=1001,
        value=101,
        step=50
        )
    if st.button('–û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å–∞ –∏ —Å–º–µ—â–µ–Ω–∏—è!'):
        # —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞
        new_log_reg = LogReg(learning_rate=user_lr, n_epochs=user_epochs)
        new_log_reg.fit(X=train_columns, y=target_column)

        # —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        answ = dict(zip(train_columns.columns, new_log_reg.coef_))
        intercept = new_log_reg.intercept_

        # –≤—ã–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        st.write("**–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –º–æ–¥–µ–ª–∏:**")
        st.table(pd.DataFrame({
            '–§–∏—á–∞': answ.keys(),
            '–í–µ—Å (–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)': answ.values()
        }))
        st.write(f"**–°–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω (intercept):** {intercept}")
    else:
        st.stop()
    # if st.button('–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫–∏, —Ö–æ—Ç—å –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å üò∫'):
        
    #     fig, axes = plt.subplots(figsize=(12, 6))
        
    #     X_array = train_columns.values

    #     x_ax = X_array[:, 0]
    #     y_ax = X_array[:, 1]

    #     pred_values = new_log_reg.predict(train_columns)

    #     colors = ['red' if y_pred > 0.5 else 'blue' for y_pred in pred_values]

    #     scatter_pred = axes.scatter(x=x_ax, y=y_ax, s=pred_values*20, c=colors, alpha=0.9) # —Ç—É—Ç —É–º–Ω–æ–∂–∏–ª –Ω–∞ 20 —Ä–∞–¥–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ—á–µ–∫ –≥—Ä–∞—Ñ–∏–∫–∞

    #     # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π –ø—Ä—è–º–æ–π
    #     x_min = x_ax.min() - 1
    #     x_max = x_ax.max() + 1
    #     x_values = np.linspace(x_min, x_max, 100)
    #     # –§–æ—Ä–º—É–ª–∞ —Ä–∞–∑–¥–µ–ª—è—é—â–µ–π –ø—Ä—è–º–æ–π: self.coef_[0] * x + self.coef_[1] * y + self.intercept_ = 0
    #     # –†–µ—à–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ y: y = (-self.coef_[0] * x - self.intercept_) / self.coef_[1]
    #     y_values = (-new_log_reg.coef_[0] * x_values - new_log_reg.intercept_) / new_log_reg.coef_[1]

    #     plt.plot(x_values, y_values, color='green', linestyle='--', linewidth=2)

    #     # –∫–∞—Å—Ç–æ–º–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–µ–≥–µ–Ω–¥—ã
    #     legend_elements = [
    #         Line2D([0], [0], marker='o', color='w', label='pred > 0.5 - —Å—á–∏—Ç–∞–µ–º 1',
    #             markerfacecolor='red', markersize=10),
    #         Line2D([0], [0], marker='o', color='w', label='pred ‚â§ 0.5 - —Å—á–∏—Ç–∞–µ–º 0',
    #             markerfacecolor='blue', markersize=10),
    #         Line2D([0], [0], color='green', lw=2, linestyle='--',
    #                                 label='–†–∞–∑–¥–µ–ª—è—é—â–∞—è –ø—Ä—è–º–∞—è'),
    #     ]

    #     plt.legend(handles=legend_elements, title='–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è')

    #     # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ –º–µ—Ç–æ–∫ –æ—Å–µ–π
    #     plt.title('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏')
    #     plt.xlabel('–§–∏—á–∞ 1 (CCAvg)')
    #     plt.ylabel('–§–∏—á–∞ 2 (Income)')

    #     # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    #     plt.grid(True, linestyle='--', alpha=0.5)
        
    #     plt.tight_layout()
    #     st.pyplot(fig)

    # else:
    #     st.stop()
else:
    st.stop()
